import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.io.FileReader; 
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import java.awt.Color;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.SwingConstants;
import javax.swing.border.BevelBorder;
import javax.swing.JSeparator;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.ImageIcon;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.event.ActionEvent;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;

public class RegisterProduct extends JFrame implements ActionListener {

	private JPanel contentPane;
	private JTextField txt_SellerID;
	private JTextField txt_SellerName;
	private JTextField txtName;
	private JTextField txtCategory;
	private JTextField txtVariation;
	private JTextField txtPrice;
	private JTextField txtDescription;
	private JTextField textField_8;
	private JTextField txtStock;
	private JTextField txtProductID;
	private JTable jTable1;
	DefaultTableModel model;
	
	private final JFileChooser openFileChooser;
	private final JFileChooser saveFileChooser;
	private BufferedImage originalBI;
	private BufferedImage newBI;
	private int [][] pixels;
	private JComboBox combobox;
	
	ArrayList<Product> productList = new ArrayList<Product>();

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					RegisterProduct frame = new RegisterProduct();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
//	public void getSelectedItem() {
//			String selectedValue = comboBox.getSelectedItem.toString();
//		
//	}
	
	
		
//        JFileChooser chooser = new JFileChooser();
//        FileNameExtensionFilter filter = new FileNameExtensionFilter(
//                "JPG, GIF, and PNG Images", "jpg", "gif", "png");
//        chooser.setFileFilter(filter);
//        int returnVal = chooser.showOpenDialog(this);
//        if (returnVal == JFileChooser.APPROVE_OPTION) {
//            File file = chooser.getSelectedFile();
//            System.out.println("You chose to open this file: "
//                    + file.getName());
//            BufferedImage image;
//            try {
//                image = ImageIO.read(file);
//                ImageIO.write(image, "jpg",new File("C:\\path\\to\\destination\\" + file.getName()));
//            } catch (IOException ex) {
//                Logger.getLogger(RegisterProduct.class.getName()).log(Level.SEVERE, null, ex);
//            }              
//        }
        
//		JFileChooser fileChooser = new JFileChooser();
//	    fileChooser.setFileFilter(new FileNameExtensionFilter("*.png", "png"));
//	    if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
//	        File file = fileChooser.getSelectedFile();
//	        try {
//	            ImageIO.write((BufferedImage) newBI, "png", new File(file.getAbsolutePath()));
//	        } catch (IOException ex) {
//	            System.out.println("Failed to save image!");
//	        }
//	    } else {
//	        System.out.println("No file choosen!");
//	    }
//	}
// }
	
	

	public RegisterProduct() {
		
		openFileChooser = new JFileChooser();
		openFileChooser.setCurrentDirectory(new File(""));
		openFileChooser.setFileFilter(new FileNameExtensionFilter("PNG images", "png", "jpeg"));
		
		saveFileChooser = new JFileChooser();
		saveFileChooser.setCurrentDirectory(new File("C:\\Users\\User\\Documents\\A.OOSE\\UKMBizLATESTTTT\\UKMBizNew\\products"));
		saveFileChooser.setFileFilter(new FileNameExtensionFilter("PNG images", "png", "jpeg"));
		
		setTitle("UKMBiz");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 899, 725);
		contentPane = new JPanel();
		contentPane.setLocation(-615, -209);
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel_4 = new JPanel();
		panel_4.setLayout(null);
		panel_4.setBackground(Color.RED);
		panel_4.setBounds(0, 0, 890, 51);
		contentPane.add(panel_4);
		
		JLabel lblNewLabel_1 = new JLabel("Seller Panel");
		lblNewLabel_1.setHorizontalAlignment(SwingConstants.LEFT);
		lblNewLabel_1.setForeground(Color.WHITE);
		lblNewLabel_1.setFont(new Font("Tahoma", Font.PLAIN, 35));
		lblNewLabel_1.setBounds(218, 0, 244, 51);
		panel_4.add(lblNewLabel_1);
		
		JLabel lblNewLabel = new JLabel("New label");
		lblNewLabel.setIcon(new ImageIcon("pictures/ukmbizlogo2.jpg"));
		lblNewLabel.setBounds(0, 0, 208, 51);
		panel_4.add(lblNewLabel);
		
		JPanel panel_1_1 = new JPanel();
		panel_1_1.setLayout(null);
		panel_1_1.setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		panel_1_1.setBackground(Color.PINK);
		panel_1_1.setBounds(0, 50, 890, 51);
		contentPane.add(panel_1_1);
		
		JSeparator separator_1 = new JSeparator();
		separator_1.setOrientation(SwingConstants.VERTICAL);
		separator_1.setForeground(Color.RED);
		separator_1.setBackground(Color.RED);
		separator_1.setBounds(345, 10, 12, 31);
		panel_1_1.add(separator_1);
		
		JSeparator separator = new JSeparator();
		separator.setOrientation(SwingConstants.VERTICAL);
		separator.setForeground(Color.RED);
		separator.setBackground(Color.RED);
		separator.setBounds(176, 10, 9, 31);
		panel_1_1.add(separator);
		
		JButton btnRegisterProduct = new JButton("Register Product");
		btnRegisterProduct.setFont(new Font("Tahoma", Font.PLAIN, 14));
		btnRegisterProduct.setBorderPainted(false);
		btnRegisterProduct.setBackground(Color.PINK);
		btnRegisterProduct.setBounds(7, 5, 160, 41);
		panel_1_1.add(btnRegisterProduct);
		
		JButton btnUpdateProduct = new JButton("Update Product");
		btnUpdateProduct.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				dispose();
				UpdateProduct nw = new UpdateProduct();
				nw.setVisible(true);
			}
		});
		btnUpdateProduct.setFont(new Font("Tahoma", Font.PLAIN, 14));
		btnUpdateProduct.setBorderPainted(false);
		btnUpdateProduct.setBackground(Color.PINK);
		btnUpdateProduct.setBounds(186, 5, 154, 41);
		panel_1_1.add(btnUpdateProduct);
		
		JButton btnViewProduct = new JButton("View Product");
		btnViewProduct.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				dispose();
				ViewProduct nw = new ViewProduct();
				nw.setVisible(true);
			}
		});
		btnViewProduct.setFont(new Font("Tahoma", Font.PLAIN, 14));
		btnViewProduct.setBorderPainted(false);
		btnViewProduct.setBackground(Color.PINK);
		btnViewProduct.setBounds(355, 5, 154, 41);
		panel_1_1.add(btnViewProduct);
		
		JButton btnLogOut = new JButton("Log Out");
		btnLogOut.setForeground(Color.WHITE);
		btnLogOut.setFont(new Font("Tahoma", Font.PLAIN, 14));
		btnLogOut.setBackground(Color.RED);
		btnLogOut.setBounds(783, 10, 85, 31);
		panel_1_1.add(btnLogOut);
		
		JLabel lblSellerId = new JLabel("Seller ID :");
		lblSellerId.setFont(new Font("Tahoma", Font.PLAIN, 17));
		lblSellerId.setBounds(10, 113, 84, 22);
		contentPane.add(lblSellerId);
		
		txt_SellerID = new JTextField();
		txt_SellerID.setColumns(10);
		txt_SellerID.setBounds(89, 113, 96, 24);
		contentPane.add(txt_SellerID);
		
		JLabel lblSellerName = new JLabel("Seller Name :");
		lblSellerName.setFont(new Font("Tahoma", Font.PLAIN, 17));
		lblSellerName.setBounds(195, 113, 113, 22);
		contentPane.add(lblSellerName);
		
		txt_SellerName = new JTextField();
		txt_SellerName.setColumns(10);
		txt_SellerName.setBounds(302, 113, 189, 22);
		contentPane.add(txt_SellerName);
		
		JLabel lblTitle = new JLabel("Register Product");
		lblTitle.setHorizontalAlignment(SwingConstants.CENTER);
		lblTitle.setForeground(Color.RED);
		lblTitle.setFont(new Font("Siro-Bold", Font.BOLD, 28));
		lblTitle.setBounds(341, 142, 247, 45);
		contentPane.add(lblTitle);
		
		JLabel lblName = new JLabel("Name :");
		lblName.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblName.setBounds(47, 234, 74, 22);
		contentPane.add(lblName);
		
		txtName = new JTextField();
		txtName.setFont(new Font("Tahoma", Font.PLAIN, 14));
		txtName.setColumns(10);
		txtName.setBounds(133, 234, 303, 25);
		contentPane.add(txtName);
		
		JLabel lblCategory = new JLabel("Category :");
		lblCategory.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblCategory.setBounds(47, 275, 84, 22);
		contentPane.add(lblCategory);
		
		txtCategory = new JTextField();
		txtCategory.setFont(new Font("Tahoma", Font.PLAIN, 14));
		txtCategory.setColumns(10);
		txtCategory.setBounds(133, 275, 303, 26);
		contentPane.add(txtCategory);
		
		JLabel lblVariation = new JLabel("Variation :");
		lblVariation.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblVariation.setBounds(47, 318, 74, 22);
		contentPane.add(lblVariation);
		
		txtVariation = new JTextField();
		txtVariation.setFont(new Font("Tahoma", Font.PLAIN, 14));
		txtVariation.setColumns(10);
		txtVariation.setBounds(133, 318, 303, 26);
		contentPane.add(txtVariation);
		
		JLabel lblPrice = new JLabel("Price :");
		lblPrice.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblPrice.setBounds(47, 359, 58, 22);
		contentPane.add(lblPrice);
		
		txtPrice = new JTextField();
		txtPrice.setFont(new Font("Tahoma", Font.PLAIN, 14));
		txtPrice.setColumns(10);
		txtPrice.setBounds(133, 359, 303, 26);
		contentPane.add(txtPrice);
		
		JLabel lblStock = new JLabel("Stock :");
		lblStock.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblStock.setBounds(47, 394, 74, 36);
		contentPane.add(lblStock);
		
		JLabel lblDescription = new JLabel("Description :");
		lblDescription.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblDescription.setBounds(47, 440, 99, 22);
		contentPane.add(lblDescription);
		
		txtDescription = new JTextField();
		txtDescription.setFont(new Font("Tahoma", Font.PLAIN, 14));
		txtDescription.setColumns(10);
		txtDescription.setBounds(133, 443, 303, 60);
		contentPane.add(txtDescription);
		
		textField_8 = new JTextField();
		textField_8.setColumns(10);
		textField_8.setBounds(561, 381, 160, 31);
		contentPane.add(textField_8);
		
		JButton btnBrowse = new JButton("Browse");
//		btnBrowse.addActionListener(new ActionListener() {
//			public void actionPerformed(java.awt.event.ActionEvent evt) {
//				btnBrowseActionPerformed();
//				chooseImage();
//				int returnValue = openFileChooser.showOpenDialog(this);
//				
//				if (returnValue == JFileChooser.APPROVE_OPTION) {
//					try {
//						originalBI = ImageIO.read(openFileChooser.getSelectedFile());
//						JOptionPane.showMessageDialog(null, "Image File Load Successfully");
//					}catch (IOException e2) {
//						JOptionPane.showMessageDialog(null, "Fail to load image");
//					}
//				}
//				else {
//					JOptionPane.showMessageDialog(null, "No File Choosen");
//				}
//			}
//		});
		btnBrowse.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnBrowse.setForeground(Color.WHITE);
		btnBrowse.setBackground(Color.RED);
		btnBrowse.setBounds(741, 380, 92, 30);
		contentPane.add(btnBrowse);
		
		JButton btnRegProduct = new JButton("Register Product");
		btnRegProduct.setForeground(Color.WHITE);
		btnRegProduct.setFont(new Font("Tahoma", Font.PLAIN, 16));
		btnRegProduct.setBackground(Color.RED);
		btnRegProduct.setBounds(594, 467, 219, 36);
		contentPane.add(btnRegProduct);
		
		JPanel panel_3 = new JPanel();
		panel_3.setLayout(null);
		panel_3.setBounds(615, 197, 160, 170);
		contentPane.add(panel_3);
		
		JLabel lbl_image = new JLabel("");
		lbl_image.setIcon(null);
		lbl_image.setBackground(Color.GRAY);
		lbl_image.setBounds(0, -35, 160, 179);
		panel_3.add(lbl_image);
		
		txtStock = new JTextField();
		txtStock.setFont(new Font("Tahoma", Font.PLAIN, 14));
		txtStock.setColumns(10);
		txtStock.setBounds(133, 400, 303, 26);
		contentPane.add(txtStock);
		
		JLabel lblProductId = new JLabel("Product ID :");
		lblProductId.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblProductId.setBounds(47, 197, 84, 22);
		contentPane.add(lblProductId);
		
		txtProductID = new JTextField();
		txtProductID.setFont(new Font("Tahoma", Font.PLAIN, 14));
		txtProductID.setColumns(10);
		txtProductID.setBounds(133, 197, 303, 25);
		contentPane.add(txtProductID);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(47, 513, 794, 119);
		contentPane.add(scrollPane);
		
		jTable1 = new JTable();
		jTable1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				int selectedRow = jTable1.getSelectedRow();
				DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
				txtProductID.setText(model.getValueAt(selectedRow, 0).toString());
				txtName.setText(model.getValueAt(selectedRow, 1).toString());
			}
		});
		jTable1.setForeground(new Color(0, 0, 0));
		jTable1.setFont(new Font("Tahoma", Font.PLAIN, 12));
		scrollPane.setViewportView(jTable1);
		jTable1.setBackground(new Color(255, 228, 225));
		model = new DefaultTableModel();
		jTable1.setRowHeight(28);
		//Object[] column = {"Product ID", "Name"};
		//Object[] row = new Object[0];
		//model.setColumnIdentifiers(column);
		jTable1.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"Product ID", "Name", "Category", "Variation", "Price", "Stock", "Description"
			}
		));
		jTable1.getColumnModel().getColumn(0).setPreferredWidth(91);
		
		JButton btnImport = new JButton("Import Product Data");
		btnImport.setForeground(Color.WHITE);
		btnImport.setFont(new Font("Tahoma", Font.PLAIN, 16));
		btnImport.setBackground(Color.RED);
		btnImport.setBounds(341, 642, 219, 36);
		contentPane.add(btnImport);
		
		JButton btnNewButton = new JButton("Save Image");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
			//convert the original image to Array
				imageToArray();
			//make a filtered image
				makeFilteredImage();
			//save the image
				saveImage();
			}
		});
		btnNewButton.setFont(new Font("Tahoma", Font.PLAIN, 16));
		btnNewButton.setForeground(Color.WHITE);
		btnNewButton.setBackground(Color.RED);
		btnNewButton.setBounds(594, 421, 219, 36);
		contentPane.add(btnNewButton);
		
		JButton btnUpdate = new JButton("UPDATE");
		btnUpdate.setFont(new Font("Tahoma", Font.PLAIN, 16));
		btnUpdate.setBounds(36, 642, 166, 31);
		contentPane.add(btnUpdate);
		
		comboBox = new JComboBox();
		comboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
//				String selectedValue = comboBox.getSelectedItem.toString();
				
			}
		});
		comboBox.setModel(new DefaultComboBoxModel(new String[] {"Blouse", "Shoes", "Handbag"}));
		comboBox.setBounds(615, 136, 198, 36);
		contentPane.add(comboBox);
		
		btnRegisterProduct.addActionListener(this);
		btnImport.addActionListener(this);
	}
	
	public void addProduct() {
		String productID = txtProductID.getText();
		String name = txtName.getText();
		String variation = txtVariation.getText();
		String price = txtPrice.getText();
		String stock = txtStock.getText();
		String description = txtDescription.getText();
		String category = txtCategory.getText();
//		
//		if(category.equals("Shoes")){
//			comboCategory.setSelectIndex(0);
//		}
		
		if(productID.isEmpty() || name.isEmpty() || category.isEmpty() || variation.isEmpty() || price.isEmpty() || stock.isEmpty() || description.isEmpty()) {
			JOptionPane.showMessageDialog(null, "Data cannot empty", "Error",JOptionPane.ERROR_MESSAGE);
		}
		else {
			String ProductID, Name, Category, Variation, Price, Stock, Description,
			aProductID, aName, aCategory, aVariation, aPrice, aStock, aDescription;
			
			boolean found = false;
			
			aProductID = txtProductID.getText();
			aName = txtName.getText();
			aCategory = txtCategory.getText();
			aVariation = txtVariation.getText();
			aPrice = txtPrice.getText();
			aStock = txtStock.getText();
			aDescription = txtDescription.getText();
			//comboBox
		
		try {
			FileReader reader = new FileReader("RegisteredItem.txt");
			FileWriter file = new FileWriter ("RegisteredItem.txt",true);
			PrintWriter outFile = new PrintWriter(file);
			
			Scanner a = new Scanner(reader);
			
			while(a.hasNextLine()) {
				String line = a.nextLine();
				StringTokenizer st = new StringTokenizer(line,";");
				ProductID = st.nextToken();
				Name = st.nextToken();
				Category = st.nextToken();
				Variation = st.nextToken();
				Price = st.nextToken();
				Stock = st.nextToken();
				Description = st.nextToken();
//					
//				if(ProductID.equals(aProductID) && Name.equals(aName) && Category.equals(aCategory) && Variation.equals(aVariation)
//						&& Price.equals(aPrice) && Stock.equals(aStock) && Description.equals(aDescription)) {
//					found=true;
//				}
				if(ProductID.equals(aProductID) ) {
					found=true;
				}
			}
			if(found) {
				JOptionPane.showMessageDialog(null, "Product ID already exist.");
				txtProductID.setText("");
			}
			else {
				
				String data[] = {txtProductID.getText(), txtName.getText(), txtCategory.getText(), txtVariation.getText(), txtPrice.getText(), txtStock.getText(), txtDescription.getText()};
				DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
				model.addRow(data);
//				model.setRowHeight(30);
				
				JOptionPane.showMessageDialog(null, "Product Registered Successfully.");
				
				txtProductID.setText("");
				txtName.setText("");
				txtCategory.setText("");
				txtVariation.setText("");
				txtPrice.setText("");
				txtStock.setText("");
				txtDescription.setText("");
				
				outFile.println(productID+ ";" +name+ ";" +category+ ";" +variation+ ";" +price+ ";" +stock+ ";" +description+ ";");
			}
			
			reader.close();
			outFile.close();
			//outFile1.close();
		}catch(Exception e1) {
			System.out.print(e1.toString()); 
		}
	}

	}

public void updateProduct(){
		DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
		if(jTable1.getSelectedRowCount() == 1) {
			String productID = txtProductID.getText();
			String name = txtName.getText();
//			String category = txtCategory.getText();
//			String variation = txtVariation.getText();
//			String price = txtPrice.getText();
//			String stock = txtStock.getText();
//			String description = txtDescription.getText();
			
			//Set Updated Value
			model.setValueAt(productID,jTable1.getSelectedRow(), 0);
			model.setValueAt(name,jTable1.getSelectedRow(), 1);
			
			//Save Updated Data
			try {
				FileWriter file = new FileWriter("RegisteredItem.txt");
				BufferedWriter bw = new BufferedWriter(file);
				
				for(int i=0; i<jTable1.getRowCount();i++) {
					for(int j=0; j<jTable1.getColumnCount();j++) {
						bw.write(jTable1.getValueAt(i, j).toString()+";");
					}
					bw.newLine();
				}
				bw.close();
				file.close();
			}catch(IOException ex) {
				Logger.getLogger(RegisterProduct.class.getName()).log(Level.SEVERE, null, ex);
				
			}
			//Message Display Updated
			JOptionPane.showMessageDialog(null, "DATA UPDATED!");
		}
		else {
			if(jTable1.getRowCount() == 0) {
				JOptionPane.showMessageDialog(null, "Table is Empty");
			}
			else {
				//kalau xpilih row
				JOptionPane.showMessageDialog(null, "Please select the row to update");
			}
		}
	}

	public void importProduct() {
			String ProductID, Name, Category, Variation, Price, Stock, Description,
				   aProductID, aName, aCategory, aVariation, aPrice, aStock, aDescription;
			
			String fileName = "RegisteredItem.txt";
			File file = new File(fileName);
			
			try {
				FileReader reader = new FileReader(file);
				BufferedReader br = new BufferedReader(reader);
				
				DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
				Object [] lines = br.lines().toArray();
				for(int i=0; i<lines.length; i++) {
					String[] row = lines[i].toString().split(";");
					model.addRow(row);
				}
				reader.close();
				br.close();
				
			} catch (FileNotFoundException ex) {
				Logger.getLogger(RegisterProduct.class.getName()).log(Level.SEVERE, null, ex);
				
			} catch (IOException ex) {
				Logger.getLogger(RegisterProduct.class.getName()).log(Level.SEVERE, null, ex);
				
			}
			
		}
	
	public void browseImage() {
	
	}
	
	private void saveImage() {
	int returnValue = saveFileChooser.showSaveDialog(this);
	
	if (returnValue == JFileChooser.APPROVE_OPTION) {
		try {
			ImageIO.write(newBI, "png",saveFileChooser.getSelectedFile());
			JOptionPane.showMessageDialog(null, "Image File Saved!");
		}catch (IOException e2) {
			JOptionPane.showMessageDialog(null, "Fail to save Image File");
		}
	}
	else {
		JOptionPane.showMessageDialog(null, "No File Choosen");
	}
}
		
		private void chooseImage() {
			int returnValue = openFileChooser.showOpenDialog(this);
			
			if (returnValue == JFileChooser.APPROVE_OPTION) {
				try {
					originalBI = ImageIO.read(openFileChooser.getSelectedFile());
					JOptionPane.showMessageDialog(null, "Image File Load Successfully");
				}catch (IOException e2) {
					JOptionPane.showMessageDialog(null, "Fail to load image");
				}
			}
			else {
				JOptionPane.showMessageDialog(null, "No File Choosen");
			}
		}
	
	private void imageToArray() {
		int width = originalBI.getWidth();
		int height = originalBI.getHeight();
		
		newBI = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
		
		pixels = new int[width][height];
		for(int a=0; a<width; a++) {
			for(int b=0; b<height; b++) {
				pixels[a][b] = originalBI.getRGB(a, b);
			}
		}
	}
	
	private void makeFilteredImage() {
		
	}
	
	public void writeFile() {
		
	}
	
	public void readFile() {
		
	}
	

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		//int index = lstStaffReg.getSelectedIndex();
		if(e.getActionCommand().equals("Register Product"))
		{
			try {
				addProduct();
				
			} catch (NumberFormatException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		else if(e.getActionCommand().equals("Import Product Data"))
		{
			importProduct();
//			staffList.clear();
//			goToMenu();
		}
	}
}
